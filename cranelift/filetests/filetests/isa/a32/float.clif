test compile precise-output
target a32

function %f1(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fadd v0, v1
  return v2
}

; block0:
;   call %AddF32
;   ret

function %f2(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fadd v0, v1
  return v2
}

; block0:
;   call %AddF64
;   ret

function %f3(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fsub v0, v1
  return v2
}

; block0:
;   call %SubF32
;   ret

function %f4(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fsub v0, v1
  return v2
}

; block0:
;   call %SubF64
;   ret

function %f5(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fmul v0, v1
  return v2
}

; block0:
;   call %MulF32
;   ret

function %f6(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fmul v0, v1
  return v2
}

; block0:
;   call %MulF64
;   ret

function %f7(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fdiv v0, v1
  return v2
}

; block0:
;   call %DivF32
;   ret

function %f8(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fdiv v0, v1
  return v2
}

; block0:
;   call %DivF64
;   ret

function %f9(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fmin v0, v1
  return v2
}

; block0:
;   call %MinF32
;   ret

function %f10(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fmin v0, v1
  return v2
}

; block0:
;   call %MinF64
;   ret

function %f11(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fmax v0, v1
  return v2
}

; block0:
;   call %MaxF32
;   ret

function %f12(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fmax v0, v1
  return v2
}

; block0:
;   call %MaxF64
;   ret

function %f13(f32) -> f32 {
block0(v0: f32):
  v1 = sqrt v0
  return v1
}

; block0:
;   call %SqrtF32
;   ret

function %f15(f64) -> f64 {
block0(v0: f64):
  v1 = sqrt v0
  return v1
}

; block0:
;   call %SqrtF64
;   ret

function %f16(f32) -> f32 {
block0(v0: f32):
  v1 = fabs v0
  return v1
}

; block0:
;   call %AbsF32
;   ret

function %f17(f64) -> f64 {
block0(v0: f64):
  v1 = fabs v0
  return v1
}

; block0:
;   call %AbsF64
;   ret

function %f18(f32) -> f32 {
block0(v0: f32):
  v1 = fneg v0
  return v1
}

; block0:
;   call %NegF32
;   ret

function %f19(f64) -> f64 {
block0(v0: f64):
  v1 = fneg v0
  return v1
}

; block0:
;   call %NegF64
;   ret

function %f20(f32) -> f64 {
block0(v0: f32):
  v1 = fpromote.f64 v0
  return v1
}

; block0:
;   call %Promote
;   ret

function %f21(f64) -> f32 {
block0(v0: f64):
  v1 = fdemote.f32 v0
  return v1
}

; block0:
;   call %Demote
;   ret

function %f22(f32) -> f32 {
block0(v0: f32):
  v1 = ceil v0
  return v1
}

; block0:
;   call %CeilF32
;   ret

function %f22(f64) -> f64 {
block0(v0: f64):
  v1 = ceil v0
  return v1
}

; block0:
;   call %CeilF64
;   ret

function %f23(f32) -> f32 {
block0(v0: f32):
  v1 = floor v0
  return v1
}

; block0:
;   call %FloorF32
;   ret

function %f24(f64) -> f64 {
block0(v0: f64):
  v1 = floor v0
  return v1
}

; block0:
;   call %FloorF64
;   ret

function %f25(f32) -> f32 {
block0(v0: f32):
  v1 = trunc v0
  return v1
}

; block0:
;   call %TruncF32
;   ret

function %f26(f64) -> f64 {
block0(v0: f64):
  v1 = trunc v0
  return v1
}

; block0:
;   call %TruncF64
;   ret

function %f27(f32) -> f32 {
block0(v0: f32):
  v1 = nearest v0
  return v1
}

; block0:
;   call %NearestF32
;   ret

function %f28(f64) -> f64 {
block0(v0: f64):
  v1 = nearest v0
  return v1
}

; block0:
;   call %NearestF64
;   ret

function %f29(f32, f32, f32) -> f32 {
block0(v0: f32, v1: f32, v2: f32):
  v3 = fma v0, v1, v2
  return v3
}

; block0:
;   call %FmaF32
;   ret

function %f30(f64, f64, f64) -> f64 {
block0(v0: f64, v1: f64, v2: f64):
  v3 = fma v0, v1, v2
  return v3
}

; block0:
;   call %FmaF64
;   ret

function %f31(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fcopysign v0, v1
  return v2
}

; block0:
;   call %CopySignF32
;   ret

function %f32(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fcopysign v0, v1
  return v2
}

; block0:
;   call %CopySignF64
;   ret

function %f33(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_uint.i32 v0
  return v1
}

; block0:
;   call %CvtF32U32
;   ret

function %f34(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_sint.i32 v0
  return v1
}

; block0:
;   call %CvtF32S32
;   ret

function %f35(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_uint.i64 v0
  return v1
}

; block0:
;   call %CvtF32U64
;   ret

function %f36(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_sint.i64 v0
  return v1
}

; block0:
;   call %CvtF32S64
;   ret

function %f37(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_uint.i32 v0
  return v1
}

; block0:
;   call %CvtF64U32
;   ret

function %f38(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_sint.i32 v0
  return v1
}

; block0:
;   call %CvtF64S32
;   ret

function %f39(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_uint.i64 v0
  return v1
}

; block0:
;   call %CvtF64U64
;   ret

function %f40(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_sint.i64 v0
  return v1
}

; block0:
;   call %CvtF64S64
;   ret

function %f41(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_uint_sat.i32 v0
  return v1
}

; block0:
;   call %CvtF32U32Sat
;   ret

function %f42(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_sint_sat.i32 v0
  return v1
}

; block0:
;   call %CvtF32S32Sat
;   ret

function %f43(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_uint_sat.i64 v0
  return v1
}

; block0:
;   call %CvtF32U64Sat
;   ret

function %f44(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_sint_sat.i64 v0
  return v1
}

; block0:
;   call %CvtF32S64Sat
;   ret

function %f45(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_uint_sat.i32 v0
  return v1
}

; block0:
;   call %CvtF64U32Sat
;   ret

function %f46(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_sint_sat.i32 v0
  return v1
}

; block0:
;   call %CvtF64S32Sat
;   ret

function %f47(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_uint_sat.i64 v0
  return v1
}

; block0:
;   call %CvtF64U64Sat
;   ret

function %f48(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_sint_sat.i64 v0
  return v1
}

; block0:
;   call %CvtF64S64Sat
;   ret

function %f49(i32) -> f32 {
block0(v0: i32):
  v1 = fcvt_from_uint.f32 v0
  return v1
}

; block0:
;   call %CvtU32F32
;   ret

function %f50(i32) -> f32 {
block0(v0: i32):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; block0:
;   call %CvtS32F32
;   ret

function %f51(i64) -> f32 {
block0(v0: i64):
  v1 = fcvt_from_uint.f32 v0
  return v1
}

; block0:
;   call %CvtU64F32
;   ret

function %f52(i64) -> f32 {
block0(v0: i64):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; block0:
;   call %CvtS64F32
;   ret

function %f53(i32) -> f64 {
block0(v0: i32):
  v1 = fcvt_from_uint.f64 v0
  return v1
}

; block0:
;   call %CvtU32F64
;   ret

function %f54(i32) -> f64 {
block0(v0: i32):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; block0:
;   call %CvtS32F64
;   ret

function %f55(i64) -> f64 {
block0(v0: i64):
  v1 = fcvt_from_uint.f64 v0
  return v1
}

; block0:
;   call %CvtU64F64
;   ret

function %f56(i64) -> f64 {
block0(v0: i64):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; block0:
;   call %CvtS64F64
;   ret
