test compile precise-output
target a32

function %bmask_i64_i64(i64) -> i64 {
block0(v0: i64):
  v1 = bmask.i64 v0
  return v1
}

; block0:
;   or a3, a0, a1
;   cmp a3, 0
;   mv.neq a1, zero, -1
;   mov a0, a1
;   ret


function %bmask_i64_i32(i64) -> i32 {
block0(v0: i64):
  v1 = bmask.i32 v0
  return v1
}

; block0:
;   or a3, a0, a1
;   cmp a3, 0
;   mv.neq a0, zero, -1
;   ret


function %bmask_i64_i16(i64) -> i16 {
block0(v0: i64):
  v1 = bmask.i16 v0
  return v1
}

; block0:
;   or a3, a0, a1
;   cmp a3, 0
;   mv.neq a6, zero, -1
;   zext16 a0, a6
;   ret


function %bmask_i64_i8(i64) -> i8 {
block0(v0: i64):
  v1 = bmask.i8 v0
  return v1
}

; block0:
;   or a3, a0, a1
;   cmp a3, 0
;   mv.neq a6, zero, -1
;   zext8 a0, a6
;   ret


function %bmask_i32_i64(i32) -> i64 {
block0(v0: i32):
  v1 = bmask.i64 v0
  return v1
}

; block0:
;   cmp a0, 0
;   mv.neq a1, zero, -1
;   mov a0, a1
;   ret


function %bmask_i32_i32(i32) -> i32 {
block0(v0: i32):
  v1 = bmask.i32 v0
  return v1
}

; block0:
;   cmp a0, 0
;   mv.neq a0, zero, -1
;   ret


function %bmask_i32_i16(i32) -> i16 {
block0(v0: i32):
  v1 = bmask.i16 v0
  return v1
}

; block0:
;   cmp a0, 0
;   mv.neq a3, zero, -1
;   zext16 a0, a3
;   ret


function %bmask_i32_i8(i32) -> i8 {
block0(v0: i32):
  v1 = bmask.i8 v0
  return v1
}

; block0:
;   cmp a0, 0
;   mv.neq a3, zero, -1
;   zext8 a0, a3
;   ret


function %bmask_i16_i64(i16) -> i64 {
block0(v0: i16):
  v1 = bmask.i64 v0
  return v1
}

; block0:
;   zext16 a2, a0
;   cmp a2, 0
;   mv.neq a1, zero, -1
;   mov a0, a1
;   ret


function %bmask_i16_i32(i16) -> i32 {
block0(v0: i16):
  v1 = bmask.i32 v0
  return v1
}

; block0:
;   zext16 a2, a0
;   cmp a2, 0
;   mv.neq a0, zero, -1
;   ret


function %bmask_i16_i16(i16) -> i16 {
block0(v0: i16):
  v1 = bmask.i16 v0
  return v1
}

; block0:
;   zext16 a2, a0
;   cmp a2, 0
;   mv.neq a5, zero, -1
;   zext16 a0, a5
;   ret


function %bmask_i16_i8(i16) -> i8 {
block0(v0: i16):
  v1 = bmask.i8 v0
  return v1
}

; block0:
;   zext16 a2, a0
;   cmp a2, 0
;   mv.neq a5, zero, -1
;   zext8 a0, a5
;   ret


function %bmask_i8_i64(i8) -> i64 {
block0(v0: i8):
  v1 = bmask.i64 v0
  return v1
}

; block0:
;   zext8 a2, a0
;   cmp a2, 0
;   mv.neq a1, zero, -1
;   mov a0, a1
;   ret


function %bmask_i8_i32(i8) -> i32 {
block0(v0: i8):
  v1 = bmask.i32 v0
  return v1
}

; block0:
;   zext8 a2, a0
;   cmp a2, 0
;   mv.neq a0, zero, -1
;   ret


function %bmask_i8_i16(i8) -> i16 {
block0(v0: i8):
  v1 = bmask.i16 v0
  return v1
}

; block0:
;   zext8 a2, a0
;   cmp a2, 0
;   mv.neq a5, zero, -1
;   zext16 a0, a5
;   ret


function %bmask_i8_i8(i8) -> i8 {
block0(v0: i8):
  v1 = bmask.i8 v0
  return v1
}

; block0:
;   zext8 a2, a0
;   cmp a2, 0
;   mv.neq a5, zero, -1
;   zext8 a0, a5
;   ret
